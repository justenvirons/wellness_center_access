---
title: "data_prep"
format: html
editor_options: 
  chunk_output_type: console
---

# Activate R packages
```{r}
#| label: Activate packages

library(censusapi) # retrieving census attribute data
library(tigris) # retrieving census geometries
library(sf) # manipulating geometry data
library(dplyr) # data wrangling, pip format
library(tidyverse) # data wrangling
library(tidycensus) # download census data
library(corrplot) # correlation plot
library(findSVI) # creating SVI using census data
library(segregation) # creating segregation measures
library(ggplot2) # create cartographic plots
library(RColorBrewer) # color palettes
library(r5r)
library(units)
library(rJava)
library(rJavaEnv)
library(areal)
library(smoothr)
library(DT)
library(data.table)
library(ggplot2)
library(tidytransit)
library(leaflet)
library(leaflet.extras)

options(scipen=999, digits = 2) # format output for data tables

```

# Create geographies
## Planned wellness center location
```{r}
wellness_center <- st_point(c(-87.73343171837095, 41.880466384462274)) %>% 
st_sfc(crs = 4326) %>% 
st_transform(3435)

# st_write(wellness_center, "layers/wellness_center.shp")
```

## Census tracts and SVI data
```{r}
county_geoid <- "17031"
crs_code <- 3435

# download census tracts
# download cook county census tracts
tracts_filename_zip <- paste0(
  "https://www2.census.gov/geo/tiger/GENZ2020/shp/cb_2020_",
  substr(county_geoid,1,2),
  "_tract_500k.zip"
)

# create file name for tracts shapefile
tracts_filename_shp <- paste0(
  "layers/cb_2020_", 
  substr(county_geoid,1,2),
  "_tract_500k.shp")

# download tracts to layers directory
temp <- tempfile()
download.file(tracts_filename_zip, temp)
unzip(temp, exdir = "layers")
unlink(temp)

# read and format tracts shapefile from layers directory
tract_boundaries_geom <- st_read(tracts_filename_shp) %>% 
  mutate(area = (ALAND+AWATER)*0.00000003586986373,
         geoid_county = paste0(STATEFP,COUNTYFP),
         geoid_tract = GEOID) %>%
  filter(geoid_county == county_geoid) %>% 
  select(geoid_county, geoid_tract, area, name = NAME) %>%
  st_transform(crs=crs_code) %>%
  st_as_sf()

# tract centroids
tract_centroids <-  tract_boundaries_geom %>% 
  st_centroid(geometry) %>%  
  st_as_sf() %>% 
  st_set_crs(3435) 
  
# State abbreviation
study_area_state_abbv <- "IL"

# extracts an abbreviated, 3-character county geoid from study_area_county_geoid variable
study_area_county_geoid_abbv <- str_sub(county_geoid, 3, 5)

# set census api key
census_api_key(key = "8f6a0a83c8a2466e3e018a966846c86412d0bb6e")

# download SVI component variables from multiple ACS tables
svi_tracts_census_data <- get_census_data(2022, 
"tract", 
state = study_area_state_abbv, 
county = study_area_county_geoid_abbv)

# calculate SVI estimates using downloaded census data
study_area_svi_estimates <- get_svi(year = 2022, data = svi_tracts_census_data)

svi_tracts_county <- study_area_svi_estimates %>% 
  rename_with(str_to_upper) %>% 
  mutate(COUNTY_FIPS = substr(GEOID,1,5),
         geoid_tract = str_pad(as.character(GEOID), 11, side = "left", pad = "0")) %>%
  filter(COUNTY_FIPS==county_geoid) %>%
  select(geoid_tract, starts_with(c("EP_","RPL_")))

# st_write(svi_tracts_county, "layers/svi_tracts_county.shp")

# create a cook county boundary
cook_county_geom <- tract_boundaries_geom %>% 
  group_by(geoid_county) %>% 
  summarise() %>% 
  st_as_sf()
```

## Chicago, community areas and neighborhoods, hexagons
```{r}
#| label: download community areas data

# city of chicago boundary from data portal
chicago <- st_read("https://data.cityofchicago.org/resource/qqq8-j68g.geojson") %>%
  st_as_sf() %>%
  st_set_crs(4326) %>%
  st_transform(crs_code)

# st_write(chicago, "layers/chicago.shp")

# community areas from metopio
community_areas <- st_read("https://metopio.blob.core.windows.net/lalage/atlas/3/shapes/communityareas.topo.json", quiet=TRUE) %>% 
  st_as_sf() %>% 
  st_set_crs(4326) %>% 
  st_transform(crs_code) %>% 
  rename(geoid = id) %>% 
  mutate(geoid= str_replace(geoid,"1714000-",""),
         location = "Chicago, IL",
         type = "community area")

# st_write(neighborhoods, "layers/community_areas.shp")

# neighborhoods from metopio
neighborhoods <- st_read("https://data.cityofchicago.org/resource/y6yq-dbs2.geojson", quiet=TRUE) %>% 
  st_as_sf() %>% 
  st_set_crs(4326) %>% 
  st_transform(crs_code) %>% 
  mutate(id = as.character(row_number()),
         type = "neighborhood") %>% 
    select(id, name = pri_neigh, type)

# 
tract_boundaries_geom <- tract_boundaries_geom %>% 
  left_join(novel_place_neighborhood_tracts %>% st_drop_geometry() %>% select(-id,
                                                                              title = name,
                                                                              type), by="geoid_tract")

# st_write(neighborhoods, "layers/neighborhoods.shp")

# create hexagons within city of chicago boundary
# cell size is 1/8 mile (660 ft)
chicago_hexagons <- chicago %>%
  st_make_grid(cellsize = 660, square = FALSE) %>%
  st_transform(crs=crs_code) %>%
  st_cast("POLYGON") %>%
  st_as_sf() %>%
  rename(geometry = x) %>%
  st_intersection(chicago) %>%
  st_as_sf() %>% 
  mutate(hexid = row_number()) %>% 
  mutate(type = st_geometry_type(geometry)) %>% 
  filter(type == "POLYGON")

# create centroids from hexagons
chicago_hexagons_centroids <- chicago_hexagons %>%
  st_centroid() %>%
  st_transform(crs = crs_code)

# join community area and neighborhood
chicago_hexagons_ca_nb_centroids <- chicago_hexagons_centroids %>%
  select(hexid) %>% 
  st_join(community_areas %>% 
            select(ca_id = geoid,
                   ca_name = name)) %>% 
  st_join(neighborhoods %>% 
          select(nb_id = id,
          nb_name = name)) %>% 
  drop_na(ca_id)

# write to shapefile
# st_write(chicago_hexagons_ca_nb_centroids, "layers/chicago_hexagons_centroids.shp")
# st_write(chicago_hexagons, "layers/chicago_hexagons.shp")

# create hexagons within city of chicago boundary
# cell size is 1/8 mile (660 ft)
cook_county_hexagons <- cook_county_geom %>%
  st_make_grid(cellsize = 660, square = FALSE) %>%
  st_transform(crs=crs_code) %>%
  st_cast("POLYGON") %>%
  st_as_sf() %>%
  rename(geometry = x) %>%
  st_intersection(cook_county_geom) %>%
  st_as_sf() %>% 
  mutate(hexid = row_number()) %>% 
  mutate(type = st_geometry_type(geometry)) %>% 
  filter(type == "POLYGON")

# create centroids from hexagons
cook_county_hexagons_centroids <- cook_county_hexagons %>%
  st_centroid() %>%
  st_transform(crs = crs_code)

# join community area and neighborhood
cook_county_hexagons_ca_nb_centroids <- cook_county_hexagons_centroids %>%
  select(hexid) %>% 
  st_join(community_areas %>% 
            select(ca_id = geoid,
                   ca_name = name)) %>% 
  st_join(neighborhoods %>% 
          select(nb_id = id,
          nb_name = name))

# import City of Chicago community areas (N=77) GEOJSON and transform to local projection for spatial analysis (epsg:3435)

community_areas <- st_read("https://metopio.blob.core.windows.net/lalage/atlas/3/shapes/communityareas.topo.json", quiet=TRUE) %>% 
  st_as_sf() %>% 
  st_set_crs(4326) %>% 
  st_transform(3435) %>% 
  rename(geoid = id) %>% 
  mutate(geoid= str_replace(geoid,"1714000-",""),
         location = "Chicago, IL",
         type = "community area")

# import places within suburban Cook County (N=125) and transform to local projection for spatial analysis (epsg:3435)

places_cook_county <- st_read("https://metopio.blob.core.windows.net/lalage/atlas/6/shapes/SCC-place.topo.json", quiet=TRUE) %>% 
  st_as_sf() %>% 
  st_set_crs(4326) %>% 
  st_transform(3435) %>% 
  mutate(type = "municipality",
         name = str_replace(name, pattern=", IL","")) %>% 
  select(id, name, type)

# create a novel geography in Cook County which combines both municipalities in suburban Cook County and communities areas in Chicago

novel_place_neighborhood <- places_cook_county %>% 
  bind_rows(neighborhoods) %>% 
  st_as_sf() %>% 
  st_make_valid()

novel_place_neighborhood_tracts <- tract_centroids %>% 
  select(geoid_tract) %>% 
  st_join(novel_place_neighborhood) 




```

## Public transit data
```{r}
#| label: CTA data

cta_bus_routes <- st_read("layers/CTA_Bus_Routes.shp") %>% 
st_transform(3435)

cta_rail_lines <- st_read("layers/CTA_RAIL_LINES.shp") %>% 
st_transform(3435)

cta_rail_stations <- st_read("layers/CTA_RAIL_STATIONS.shp") %>% 
st_transform(3435)

# download cook county census tracts
cta_gtfs_zip <- paste0(
  "https://www.transitchicago.com/downloads/sch_data/google_transit.zip"
)

# download tracts to layers directory
temp <- tempfile()
download.file(cta_gtfs_zip, temp)
unzip(temp, exdir = "otp")
unlink(temp)

# cta bus stops
cta_bus_stops <- read_delim("otp/stops.txt", delim=",") %>% 
  st_as_sf(
    coords = c("stop_lon", "stop_lat"),
    crs = 4326
  ) %>% 
  st_transform(3435)

```

## save to .RDAta file
```{r}
save(
  crs_code,
  county_geoid, chicago,
     chicago_hexagons,
     chicago_hexagons_ca_nb_centroids,
     cook_county_geom,
     cook_county_hexagons,
     cook_county_hexagons_ca_nb_centroids,
     neighborhoods,
     community_areas,
     study_area_svi_estimates, 
     tract_boundaries_geom,
  cta_bus_stops,
  cta_rail_stations,
     wellness_center, file = "data/wellness_center.RData")
```

# Wellness center accessibility analyses
## Load datasets
```{r}
load(file = "data/wellness_center.RData")
```

## Format origin and destination points
```{r}
# format wellness_center origin
wellness_center_origin <- wellness_center %>%
  st_as_sf() %>%
  st_drop_geometry() %>%
  mutate(id = as.character(1),
         lat = 41.880466384462274,
         lon = -87.73343171837095)

# create city of cook county destination points
points <- cook_county_hexagons_ca_nb_centroids %>%
  # filter(nb_id == 6) %>%
  st_transform(4326) %>%
  st_coordinates() %>%
  as.data.frame() %>%
  rename(lon = X, lat = Y) %>%
  bind_cols(
    cook_county_hexagons_ca_nb_centroids %>%
      st_drop_geometry() %>%
      # filter(nb_id == 6) %>%
      dplyr::select(id = hexid) %>%
      mutate(id = as.character(id))
  )


```

## Function for setting up r5r analytical folder
```{r}
fx_set_up_r5r <- function() {
  options(java.parameters = "-Xmx2G")
  options(java.parameters = c("-Xmx2G", "-XX:ActiveProcessorCount=4"))
  
  # Set data path that contains OSM pbf, GTFS file
  data_path <- "otp"
  list.files(data_path)
  
  # Building routable transport network
  # The first step is to build the multimodal transport network used for routing in R5. This is done with the setup_r5 function. This function does two things: (1) downloads/updates a compiled JAR file of R5 and stores it locally in the {r5r} package directory for future use; and (2) combines the osm.pbf and gtfs.zip data sets to build a routable network object.
  r5r_core <- setup_r5(data_path = data_path)
  
  return(r5r_core)
}

```

## Compute isochrones from travel time matrices
### Quarter mile radius
```{r}
# buffer wellness center by 1/2 mile (1320 ft)
wellness_center_qm_radius <- st_buffer(wellness_center %>% st_as_sf(), dist = 1320) %>% 
  mutate(mode = "Any",
         area = st_area(x)*0.00000003586986373,
         travel = "0.25 mile") %>%
  drop_units() %>% 
  rename(geometry = x)

plot(wellness_center_qm_radius)
```

### Network walk travel time 15 minutes
```{r}
# initiate r5r folder, network
r5r_core <- fx_set_up_r5r()

# routing inputs
# mode <- c("WALK", "TRANSIT")
mode <- c("WALK")
walk_speed <- 3.6
max_walk_time <- 15      # in minutes
max_trip_duration <- 15
time_window <- 1
departure_datetime <- as.POSIXct("01-04-2025 09:00:00",
                                 format = "%d-%m-%Y %H:%M:%S")

# travel time matrix
ttm_walk_15 <- travel_time_matrix(r5r_core,   
                          origins = wellness_center_origin,
                          destinations = points,
                          mode = mode,
                          max_walk_time = max_walk_time,
                          max_trip_duration = max_trip_duration,
                          time_window = time_window,
                          departure_datetime = departure_datetime )

# stop r5r analysis, clear cache
r5r::stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)

# join travel time matrix with cook county points
# ttm_wellness_center_cook_county <- cook_county_hexagons_ca_nb_centroids %>% 
#   mutate(hexid = as.character(hexid)) %>% 
#   right_join(ttm, by=c("hexid" = "to_id")) %>% 
#   left_join(points, by=c("hexid"="id"))  %>% 
#   st_as_sf() %>% 
#   dplyr::select(lon, 
#                 lat,
#                 travel_time_p50)

# join travel time matrix with cook county hexagons
ttm_walk_15_hexagons <- cook_county_hexagons %>% 
  mutate(hexid = as.character(hexid)) %>% 
  right_join(ttm_walk_15, by=c("hexid" = "to_id")) %>% 
  st_as_sf()

# plot(ttm_walk_15_hexagons)

# create boundary around hexagons
ttm_walk_15_hexagons_boundary <- st_union(ttm_walk_15_hexagons, by_feature = FALSE)

#plot(ttm_walk_15_hexagons_boundary)

# smooth boundary
ttm_walk_15_smooth_boundary <- ttm_walk_15_hexagons_boundary  %>%
       st_as_sf() %>% 
       smooth(method = "ksmooth") %>% 
  st_cast("POLYGON") %>% 
  mutate(mode = "Walk",
         area = st_area(x)*0.00000003586986373,
         travel = "15 minutes") %>%
  drop_units() %>% 
  rename(geometry = x)

#plot(ttm_walk_15_smooth_boundary)
walk_iso_15 <- st_simplify(ttm_walk_15_smooth_boundary, preserveTopology = TRUE, dTolerance = 40)

plot(walk_iso_15)
```

### Network walk, transit travel times
```{r}

transit_durations <- list(15, 20, 25, 30)

for (aduration in transit_durations) {
  # object name
  atransit_isoname <- paste0("transit_iso_",as.character(aduration))
  
  print(atransit_isoname)
  
  # initiate r5r folder, network
  r5r_core <- fx_set_up_r5r()
  
  # routing inputs
  mode <- c("WALK", "TRANSIT")
  walk_speed <- 3.6
  max_walk_time <- 15
  max_trip_duration <- aduration
  time_window <- 120
  departure_datetime <- as.POSIXct("01-04-2025 09:00:00", format = "%d-%m-%Y %H:%M:%S")
  
  # travel time matrix
  ttm_transit <- travel_time_matrix(
    r5r_core,
    origins = wellness_center_origin,
    destinations = points,
    mode = mode,
    max_walk_time = max_walk_time,
    max_trip_duration = max_trip_duration,
    time_window = time_window,
    departure_datetime = departure_datetime
  )
  
  # stop r5r analysis, clear cache
  r5r::stop_r5(r5r_core)
  rJava::.jgc(R.gc = TRUE)
  
  # join travel time matrix with cook county points
  # ttm_wellness_center_cook_county <- cook_county_hexagons_ca_nb_centroids %>%
  #   mutate(hexid = as.character(hexid)) %>%
  #   right_join(ttm, by=c("hexid" = "to_id")) %>%
  #   left_join(points, by=c("hexid"="id"))  %>%
  #   st_as_sf() %>%
  #   dplyr::select(lon,
  #                 lat,
  #                 travel_time_p50)
  
  # join travel time matrix with cook county hexagons
  ttm_transit_hexagons <- cook_county_hexagons %>%
    mutate(hexid = as.character(hexid)) %>%
    right_join(ttm_transit, by = c("hexid" = "to_id")) %>%
    st_as_sf()
  
  # plot(ttm_transit_30_hexagons)
  
  # create boundary around hexagons
  ttm_transit_hexagons_boundary <- st_union(ttm_transit_hexagons, by_feature = FALSE)
  
  # plot(ttm_transit_hexagons_boundary)
  
  # smooth boundary
  ttm_transit_smooth_boundary <- ttm_transit_hexagons_boundary  %>%
    st_as_sf() %>%
    smooth(method = "ksmooth") %>%
    st_cast("POLYGON") %>%
    mutate(mode = "Walk + Transit",
           area = st_area(x) * 0.00000003586986373,
           travel = paste0(as.character(aduration)," minutes")) %>%
    drop_units() %>%
    filter(area > 0.2) %>%
    rename(geometry = x)
  
  plot(ttm_transit_smooth_boundary)
  
  # simplify boundary
  ttm_transit_iso <- st_simplify(
    ttm_transit_smooth_boundary,
    preserveTopology = TRUE,
    dTolerance = 40
  )
  
  plot(ttm_transit_iso)
  
  assign(value = ttm_transit_iso,x = atransit_isoname)
}


```

## Combine isochrones
```{r}
iso_all <- transit_iso_15 %>% 
  bind_rows(transit_iso_20,
            transit_iso_25,
            transit_iso_30,
            walk_iso_15,
            wellness_center_qm_radius)

```

# Create summary tables
```{r}

study_area_svi_estimates_geom <- tract_boundaries_geom %>% 
  left_join(study_area_svi_estimates, by=c("geoid_tract"="GEOID")) %>%  
  st_as_sf() %>% 
  st_set_crs(3435)

for(aindex in 1:nrow(iso_all)) {
  amode <- iso_all$mode[aindex]
  atravel <- iso_all$travel[aindex]
  
  aw_iso_svi_name <- paste0(
    "aw_iso_svi_",
    str_replace(amode, pattern = " + ", replacement = ""),
    "_",
    str_replace(
      str_replace(atravel, pattern = " minutes", replacement = ""),
      "0.25 mile",
      "qm"
    )
  )
  print(aw_iso_svi_name)
  
  aw_iso_svi <-  iso_all %>%
    filter(travel == atravel &
             mode == amode) %>%
    aw_interpolate(
      tid = travel,
      source = study_area_svi_estimates_geom,
      sid = "geoid_tract",
      weight = "total",
      output = "tibble",
      extensive = c(
        "E_TOTPOP",
        "E_HU",
        "E_HH",
        "E_POV150",
        "E_UNEMP",
        "E_HBURD",
        "E_NOHSDP",
        "E_UNINSUR",
        "E_AGE65",
        "E_AGE17",
        "E_DISABL",
        "E_SNGPNT",
        "E_LIMENG",
        "E_MINRTY",
        "E_MUNIT",
        "E_MOBILE",
        "E_CROWD",
        "E_NOVEH",
        "E_GROUPQ"
      )
    )
  assign(value = aw_iso_svi, x = aw_iso_svi_name)
}


```

# Combine and format summary tables
```{r}
# add bus stops to dataset
iso_all$stop_count <- lengths(st_intersects(iso_all, cta_bus_stops))
iso_all$station_count <- lengths(st_intersects(iso_all, cta_rail_stations))

# bind all summary data and add cta stops, stations
iso_all_svi_summary <- aw_iso_svi_Any_qm %>%
  bind_rows(
    aw_iso_svi_Walk_15,
    `aw_iso_svi_Walk + Transit_15`,
    `aw_iso_svi_Walk + Transit_20`,
    `aw_iso_svi_Walk + Transit_25`,
    `aw_iso_svi_Walk + Transit_30`
  ) %>%
  left_join(iso_all %>% select(-area),
            by = c("mode" = "mode", "travel" = "travel"))

# format final table
iso_all_svi_summary_formatted <- iso_all_svi_summary %>%
  mutate_at(vars(E_AGE17:E_AGE65, E_DISABL, E_MINRTY, E_POV150, E_UNINSUR),
            ~ as.character(round(. / E_TOTPOP * 100, digits=1))) %>%
  mutate_at(vars(E_CROWD, E_HBURD), ~ as.character(round(. / E_HH * 100, digits=1))) %>%
  mutate_at(vars(E_TOTPOP,E_HH,E_HU), ~ as.character(format(., big.mark = ","))) %>% 
    select(
    "Transportation mode" = mode,
    "Square miles" = area,
    "Time/distance" = travel,
    "Bus stops" = stop_count,
    "CTA stations" = station_count,
    "Population" = E_TOTPOP,
    "Households" = E_HH,
    "Housing units" = E_HU,
    "17 yrs or less (%)" = E_AGE17,
    "65 yrs or more (%)" = E_AGE65,
    "Disabled (%)" = E_DISABL,
    "Non-White (%)" = E_MINRTY,
    "High poverty (%)" = E_POV150,
    "Uninsured (%)" = E_UNINSUR,
    "Overcrowded (%)" = E_CROWD,
    "Housing burdened (%)" = E_HBURD
  )

# create data table
iso_summary_datatable <- iso_all_svi_summary_formatted %>%
  t() %>%
  as.data.frame() %>%
  rownames_to_column() %>%
  rename(
    "Category" = rowname,
    "1/4 mile" = V1,
    "15-minutes (walk)" = V2,
    "15-minutes" = V3,
    "20-minutes" = V4,
    "25-minutes" = V5,
    "30-minutes" = V6
  ) %>%
  datatable(
    class = 'cell-border stripe',
    rownames = FALSE,
    options = list(pageLength = 16)
  ) %>%
  formatStyle(columns = c(1:7), fontSize = '75%') %>% 
  formatStyle(columns = c(1), fontWeight = 'bold', `text-align` = 'left') %>% 
  formatStyle(columns = c(2:7), fontWeight = 'italic', `text-align` = 'right')

iso_summary_datatable
```




# Draft map
```{r}
#| label: fig-wellnesscenter
#| fig-cap: Garfield Park Wellness Center Accessibility Analysis

# format iso data for map
iso_all_map <- iso_all %>%
  mutate(travel = as.numeric(str_replace(str_replace(travel, pattern = " minutes", replacement = ""),pattern = " mile", "")))

# format bus stops, rail stations for map
# bus stops
cta_bus_stops_map <- cta_bus_stops %>% 
  st_join(iso_all_map %>% filter(travel == 30)) %>% 
  as.data.frame() %>%
  st_as_sf() %>% 
  drop_na(travel) %>% 
  st_transform(4326) 

# add xy coordinates
cta_bus_stops_map_xy <- cta_bus_stops_map %>% 
  bind_cols(st_coordinates(cta_bus_stops_map)) %>% 
  select(stop_name,
         long = X,
         lat = Y) %>% 
  st_drop_geometry()

# format bus stops, rail stations for map
# bus stops
cta_rail_stations_map <- cta_rail_stations %>% 
  mutate(stop_name = paste0(SHORTNAME, " (",LEGEND,")")) %>% 
  select(stop_name) %>% 
  st_join(iso_all_map %>% filter(travel == 30)) %>% 
  as.data.frame() %>%
  st_as_sf() %>% 
  drop_na(travel) %>% 
  st_transform(4326) 

# add xy coordinates
cta_rail_stations_map_xy <- cta_rail_stations_map %>% 
  bind_cols(st_coordinates(cta_rail_stations_map)) %>% 
  select(stop_name,
         long = X,
         lat = Y) %>% 
  st_drop_geometry()

# plot state and county maps with leaflet
wellness_labels <- sprintf(
  "<strong>Census Tract %s</strong><br/>
  <i>%s %s</i><br/>
  Total population: %s<br/>
  Households: %s<br/>
  Housing units: %s<br/>
  Non-white: %0.1f%%<br/>
  No vehicles: %0.1f%%<br/>
  Uninsured: %0.1f%%<br/>
  Poverty: %0.1f%%<br/>
  No Diploma: %0.1f%%<br/>
  SVI: %0.2f",
  study_area_svi_estimates_geom$name,
  study_area_svi_estimates_geom$title,
  study_area_svi_estimates_geom$type,
  format(study_area_svi_estimates_geom$E_TOTPOP,big.mark=","),
  format(study_area_svi_estimates_geom$E_HH, big.mark=","),
  format(study_area_svi_estimates_geom$E_HU, big.mark=","),
  study_area_svi_estimates_geom$EP_MINRTY,
  study_area_svi_estimates_geom$EP_NOVEH,
  study_area_svi_estimates_geom$EP_UNINSUR,
  study_area_svi_estimates_geom$EP_POV150,
  study_area_svi_estimates_geom$EP_NOHSDP,
  study_area_svi_estimates_geom$RPL_themes) %>%
lapply(htmltools::HTML)

# create palette
pal_wellness <- colorBin(
  palette = "Greys",
  domain = study_area_svi_estimates_geom$RPL_themes,
  6,
  pretty=FALSE)

# a label style
neighborhood_label_style <- labelOptions(
  noHide = TRUE,
  direction = "center",
  textOnly = TRUE,
  style = list(
    "color" = "white",
    "font-family" = "arial",
    "font-style" = "bold",
    "font-size" = "14px"
  )
)

# center icon
centerIcon <- makeIcon(
  iconUrl = "images/orange_circle.png",
  iconWidth = 20, iconHeight = 20
)

# function for creating mode-specific map
wellness_center_map <- leaflet(study_area_svi_estimates_geom %>% st_transform(4326)) %>%
  setView(lng = -87.73343171837095,
          lat = 41.880466384462274,
          zoom = 13) %>%
  addMapPane("Tiles", zIndex = 400) %>%
  addMapPane("Census Tracts", zIndex = 410) %>%
  addMapPane("Neighborhoods", zIndex = 420) %>%
  addMapPane("Isochrones", zIndex = 430) %>%
  addMapPane("Bus Stops", zIndex = 440) %>% 
  addMapPane("Rail Stations", zIndex = 450) %>% 
  addMapPane("Wellness Center", zIndex = 460) %>% 
  addProviderTiles(providers$CartoDB.Positron,
                   group = "Positron (minimal)",
                   options = pathOptions(pane = "Tiles")) %>%
  #addProviderTiles(providers$Esri.WorldImagery,
  #                 group = "World Imagery (satellite)",
  #                 options = pathOptions(
  #  pane = "Tiles")) %>%
  addCircleMarkers(
    lng = -87.73343171837095,
    lat = 41.880466384462274,
    label = "4305 W Madison",
    weight = 1,
    color = "black",
    fillColor = "darkorange",
    group = "Wellness Center",
    fillOpacity = 1,
    options = pathOptions(pane = "Wellness Center")
  ) %>%
  addCircleMarkers(
    data = cta_bus_stops_map_xy,
    ~ long,
    ~ lat,
    label = ~ stop_name,
    weight = 0.1,
    radius = 3,
    # stroke = F,
    fillColor = "white",
    fillOpacity = 0.5,
    group = "Bus Stops",
    options = pathOptions(pane = "Bus Stops")
  ) %>%
  addCircleMarkers(
    data = cta_rail_stations_map_xy %>% filter(str_detect(stop_name, pattern="(GR)")),
    ~ long,
    ~ lat,
    label = ~ stop_name,
    weight = 0.1,
    radius = 4,
    # stroke = F,
    fillColor = "darkgreen",
    fillOpacity = 0.75,
    group = "Rail Stations",
    options = pathOptions(pane = "Rail Stations")
  ) %>%
  addCircleMarkers(
    data = cta_rail_stations_map_xy %>% filter(str_detect(stop_name, pattern="(BL)")),
    ~ long,
    ~ lat,
    label = ~ stop_name,
    weight = 0.1,
    radius = 4,
    # stroke = F,
    fillColor = "blue",
    fillOpacity = 0.75,
    group = "Rail Stations",
    options = pathOptions(pane = "Rail Stations")
  ) %>% 
    addCircleMarkers(
    data = cta_rail_stations_map_xy %>% filter(str_detect(stop_name, pattern="(PK)")),
    ~ long,
    ~ lat,
    label = ~ stop_name,
    weight = 1,
    color = "black",
    radius = 4,
    # stroke = F,
    fillColor = "pink",
    fillOpacity = 1,
    group = "Rail Stations",
    options = pathOptions(pane = "Rail Stations")
  ) %>% 
  addPolylines(
    data = novel_place_neighborhood %>% st_transform(4326),
    stroke = TRUE,
    weight = 2,
    opacity = 1,
    fillOpacity = 0,
    color = "white",
    group = "Neighborhoods",
    options = pathOptions(pane = "Neighborhoods")
  ) %>%
  addPolygons(
    fillColor = ~ pal_wellness(RPL_themes),
    weight = 0.25,
    opacity = 0.5,
    color = "white",
    fillOpacity = 0.4,
    label = wellness_labels,
    options = pathOptions(pane = "Census Tracts")
  ) %>%
  addPolylines(
    data = iso_all_map %>% filter(mode == "Walk") %>% st_transform(4326),
    stroke = TRUE,
    weight = 5,
    opacity = 1,
    color = "darkorange",
    group = "15-minute walk",
    options = pathOptions(pane = "Isochrones")
  ) %>%
  addPolylines(
    data = iso_all_map %>% filter(mode == "Walk + Transit", travel == 15) %>% st_transform(4326),
    stroke = TRUE,
    weight = 5,
    opacity = 1,
    color = "darkorange",
    group = "15-minute transit",
    options = pathOptions(pane = "Isochrones")
  ) %>%
  addPolylines(
    data = iso_all_map %>% filter(mode == "Walk + Transit", travel == 20) %>% st_transform(4326),
    stroke = TRUE,
    weight = 5,
    opacity = 1,
    color = "darkorange",
    group = "20-minute transit",
    options = pathOptions(pane = "Isochrones")
  ) %>%
  addPolylines(
    data = iso_all_map %>% filter(mode == "Walk + Transit", travel == 25) %>% st_transform(4326),
    stroke = TRUE,
    weight = 5,
    opacity = 1,
    color = "darkorange",
    group = "25-minute transit",
    options = pathOptions(pane = "Isochrones")
  ) %>%
  addPolylines(
    data = iso_all_map %>% filter(mode == "Walk + Transit", travel == 30) %>% st_transform(4326),
    stroke = TRUE,
    weight = 5,
    opacity = 1,
    color = "darkorange",
    group = "30-minute transit",
    options = pathOptions(pane = "Isochrones")
  ) %>%
  addPolylines(
    data = iso_all_map %>% filter(mode == "Any") %>% st_transform(4326),
    stroke = TRUE,
    weight = 5,
    opacity = 1,
    color = "darkorange",
    group = "1/4-mile radius",
    options = pathOptions(pane = "Isochrones")
  ) %>%
  addLegend(
    "bottomleft",
    pal = pal_wellness,
    values = ~ RPL_themes,
    title = "SVI Values",
    opacity = 0.5
  ) %>%
  addResetMapButton() %>%
  addFullscreenControl() %>%
  addScaleBar(position = "bottomleft") %>% 
  addLayersControl(
    baseGroups = c(
      "15-minute walk",
      "15-minute transit",
      "20-minute transit",
      "25-minute transit",
      "30-minute transit",
      "1/4-mile radius"
    ),
    overlayGroups = c("Wellness Center", "Neighborhoods", "Bus Stops", "Rail Stations"),
    options = layersControlOptions(collapsed = FALSE) 
  )

wellness_center_map
```

# Save assets for quarto document
```{r}
save(wellness_center_map,
     iso_summary_datatable, 
     study_area_svi_estimates_geom,
     file = "data/wellness_center_assets.RData"
     )

```
